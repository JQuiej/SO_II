name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  create:
    tags: ['v*.*.*']

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: login_registro_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -psecret"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mysqli, pdo_mysql
          tools: composer

      - name: Install PHP dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --no-progress --no-interaction
          else
            echo "No composer.json — skipping install"
          fi

      - name: Run tests
        run: composer test

      - name: Install Docker Compose plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Build & start services
        run: docker compose up -d --build

      - name: Wait for web
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/index.php >/dev/null; then
              echo "Web is up!"
              exit 0
            fi
            sleep 5
          done
          echo "Web did not start in time" >&2
          exit 1

      - name: Smoke test homepage
        run: curl -sSf http://localhost:8080/index.php

      - name: Build & push Docker image
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/proyecto-so-2:latest
            ${{ secrets.DOCKERHUB_USER }}/proyecto-so-2:${{ github.sha }}

      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          # Opcional: especifica canal, o déjalo vacío para usar el predeterminado del webhook
          channel: ''
